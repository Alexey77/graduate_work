services:

  postgres:
    image: postgres:16.3-alpine
    container_name: postgres
    expose:
      - "5432"
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 2s
      retries: 5
    networks:
      - auth-network

  nginx:
    image: nginx:1.25.3
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    ports:
      - "81:80"
    restart: always
    networks:
      - auth-network
    depends_on:
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -I http://localhost || exit 1"]
      interval: 10s
      timeout: 2s
      retries: 5

  redis:
    image: redis:7.2.4
    container_name: redis
    restart: always
    env_file:
      - .env
    expose:
      - "6379"
    networks:
      - auth-network
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG || exit 1" ]
      interval: 10s
      timeout: 2s
      retries: 5

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    expose:
      - "16686"
      - "6831/udp"
      - "6832/udp"
      - "5778"
    restart: always
    networks:
      - auth-network
    depends_on:
      nginx:
        condition: service_healthy

  auth-service:
    build: ./
    image: auth-service
    container_name: auth-service
    restart: always
    expose:
      - "8000"
    env_file:
       - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - auth-network
    healthcheck:
      test: ["CMD-SHELL", "curl --fail -H 'X-Request-Id: healthcheck' http://localhost:8000/api/v1/healthy/live || exit 1"]
      interval: 10s
      timeout: 2s
      retries: 5

networks:
  auth-network: