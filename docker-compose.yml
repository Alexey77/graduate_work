services:
  assistant_service:
    build: ./assistant_service
    env_file:
      - ./assistant_service/.env
    depends_on:
      - mongo
      - llm_service
      - text_vector_service
      - rabbitmq
    networks:
      - backend

  test_assistant_service:
    build:
      context: ./assistant_service
      dockerfile: Dockerfile.test
    depends_on:
      - assistant_service
    environment:
      - SERVICE_HOST=assistant_service
      - SERVICE_PORT=8000
    command: pytest -s
    networks:
      - backend

  auth_service:
    build: ./auth-service
    env_file:
      - ./auth-service/.env
    depends_on:
      - auth_db
      - redis
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail -H 'X-Request-Id: healthcheck' http://localhost:8000/api/v1/healthy/live || exit 1" ]
      interval: 10s
      timeout: 2s
      retries: 5
    networks:
      - backend

  auth_db:
    image: postgres:16.3-alpine
    container_name: auth_db
    restart: always
    env_file:
      - ./auth-service/.env
    networks:
      - backend

  redis:
    image: redis:7.2.4
    container_name: redis
    restart: always
    env_file:
      - ./auth-service/.env
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG || exit 1" ]
      interval: 10s
      timeout: 2s
      retries: 5
    networks:
      - backend

  llm_service:
    build: ./llm_service
    env_file:
      - ./llm_service/.env
    depends_on:
      - text_vector_service
    networks:
      - backend

  text_vector_service:
    build: ./text_vector_service
    env_file:
      - ./text_vector_service/.env
    depends_on:
      - qdrant
    volumes:
      - text_models:/app/models
    networks:
      - backend

  qdrant:
    image: qdrant/qdrant:latest
    volumes:
      - qdrant-data:/qdrant/storage
    restart: always
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3.13.7-alpine
    hostname: rabbitmq
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: 1234
    networks:
      - backend

  mongo:
    image: mongo:8.0.1-noble
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: 1234
    volumes:
      - mongo-data:/data/db
    networks:
      - backend

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "81:81"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - assistant_service
      - auth_service
    networks:
      - backend

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    restart: always
    depends_on:
      - nginx
    networks:
      - backend

volumes:
  rabbitmq-data:
  mongo-data:
  qdrant-data:
  text_models:

networks:
  backend:
